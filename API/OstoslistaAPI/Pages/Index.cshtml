@page
@model OstoslistaAPI.Pages.IndexModel
@{
    ViewData["Title"] = "Tuotteet";
}

<style type="text/css">
    .ui-dialog-titlebar-close {
        visibility: hidden;
    }

    .ui-dialog .ui-dialog-title {
        text-align: center;
        width: 100%;
    }
</style>

<div class="text-center">
    <h1><i class="fas fa-shopping-basket"></i> Ostoslista@(string.IsNullOrWhiteSpace(Model.ShopperName) ? "" : $" ({Model.HtmlEncodedShopperName})")</h1>
    @{
        if (Model.Shopper != null && (Model.Shopper.ShowAdditionalButtons ?? true) && Model.UserIsReadAuthenticated)
        {
    <text>
    <div>
        <a href="@Model.MailTo" class="text-dark"><i class="far fa-envelope"></i> Lähetä ostoslistan WWW-osoite sähköpostilla</a><br />
        <a href="#" class="text-dark" id="showQRCode"><i class="fas fa-qrcode"></i> Näytä QR-koodi tähän ostoslistaan</a>
        <div id="dialog" title="Ostoslistan linkki" style="display: none;">
            <img src="@Model.GetBase64EncodedHtmlEmelentImageSource(Model.ShopperRootUrl)" alt="Linkki ostoslistaan"/>
        </div>
        <script>
            $(function() {
                $("#dialog").dialog({
                    modal: true,
                    height: "auto",
                    width: "auto",
                    autoOpen: false,
                });

                $("#showQRCode").on("click",
                    function() {
                        $("#dialog").dialog("open");
                    });

                $(document).bind("click",
                    function (e) {
                        if (e.target.id === "showQRCode") {
                            return;
                        }
                        $("#dialog").dialog("close");
                    });
            });
        </script>
    </div>
    </text>
        }
    }
    <div id="ostolistaTuotteet" style="display: none;">
        @{
            if (Model.UserIsOwnerAuthenticated)
            {
        <text>
        <div class="spaceBelow">
            <a href="/Settings" target="_self" title="Muokkaa ostoslistasi asetuksia..." class="text-dark"><i class="fas fa-tasks"></i> Ostoslistasi asetukset</a>
        </div>
        </text>
            }

            if (Model.UserIsWriteAuthenticated)
            {
        <text>
        <div>
            <input type="text" id="uusiTuote" placeholder="Syötä uusi tuote..." onkeypress="return keyPress(event, sendNew);" class="newItem"/>&nbsp;
            <input type="button" value="Lähetä" onclick="sendNew();" class="buttons"/>
        </div>
        </text>
            }
        }
        <div class="shoppingList" id="ostoslista">Ladataan...</div>
        @{
            if (Model.UserIsWriteAuthenticated)
            {
        <text>
        <div class="buyCheckedItems"><input type="button" value="Maksa valitut tuotteet" onclick="buyCheckedItems();" class="buttons" /></div>
        </text>
            }
        }
    </div>
</div>

<script type="text/javascript">
    @{
        if (Model.UserIsReadAuthenticated)
        {
    <text>
    var connection = new signalR.HubConnectionBuilder().withUrl("/shoppingListHub").build();
    connection.serverTimeoutInMilliseconds = 60 * 60 * 1000;

    $(window).on('beforeunload', function () {
        connection.stop();
    });

    function loadShoppingListDataSuccess(data) {
        var ostoslista = $("#ostoslista");
        ostoslista.html("");

        for (var i = 0; data && i < data.length; i++) {
            addItemToList(data[i]);
        };
    }

    function checkConnectionState() {
        /*
        var stateConversion = {0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected'};
        console.log('SignalR connection state: ' + stateConversion[connection.state]);
        */
        if (connection.state !== 1) {
            $.blockUI({ message: $('#waitIndContainer') });
            window.location = window.location;
        }
    }

    function findRow(itemId) {
        var elem = $("#ostolistaTuotteet");
        return elem.find('input[name="tuoteId"][value="' + itemId + '"]').parents('div.shoppingList-item-row');
    }

    function getTempItemRow(title) {
        var iconElem = $('<div class="shoppingList-item-cell"></div>');
        iconElem.append($('<i name="tuoteKorissa" class="fas fa-spinner fa-spin"></i>'));
        return createItemRow(iconElem, title, "", true);
    }

    function reconnectToHub() {
        if (@(Model.ShopperName?.Length ?? 0) > 0) {
            console.log('Reconnecting to the hub...');
            connection.start().then(() => {
                connection.invoke("RegisterShopper", "@Model.EscapedShopperName").catch(err => console.error(err.toString()));
            });
        }
    }

    function setItemRowPending(row, isPending) {
        //console.log("setItemRowPending " + isPending);
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("fas");
        checkElem.removeClass("fa-spinner");
        checkElem.removeClass("fa-spin");
        checkElem.removeClass("far");
        checkElem.removeClass("fa-circle");
        checkElem.removeClass("fa-check-circle");
        checkElem.addClass("far");
        if (isPending) {
            checkElem.addClass("fa-circle");
        } else {
            checkElem.addClass("fa-check-circle");
        }
    }

    function setItemRowPendingFromData(row, data) {
        setItemRowPending(row, data.Pending);
    }

    function setItemRowValues(row, title, itemId) {
        row.prop("title", title);
        var idElem = row.find('input[name="tuoteId"]');
        idElem.val(itemId);
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("fas");
        checkElem.removeClass("fa-spinner");
        checkElem.removeClass("fa-spin");
        checkElem.addClass("far");
        checkElem.addClass("fa-circle");
    }

    function setItemRowDataValues(row, data) {
        setItemRowValues(row, data.Title, data.Id);
    }

    function createItemRow(iconElem, title, itemId, addPlus) {
        var row = $('<div class="shoppingList-item-row" style="cursor: @(Model.UserIsWriteAuthenticated ? "pointer" : "default")";></div>');
        row.prop("title", title);
        row.append(iconElem);
        var cell2 = $('<div class="shoppingList-item-cell"></div>');
        cell2.append($('<span style="margin-left: 10px"></span>').text(title));
        cell2.append($('<input type="hidden" name="tuoteId"/>').val(itemId));
        if (addPlus) {
            cell2.append($('<i class="fa fa-plus-circle shoppingList-item-new" aria-hidden="true"></i>'));
        }
        row.append(cell2);
        return row;
    }

    function createDefaultCheckBoxElement(isPending) {
        var iconElem = $('<div class="shoppingList-item-cell"></div>');
        if (isPending) {
            iconElem.append($('<i name="tuoteKorissa" class="far fa-circle"></i>'));
        } else {
            iconElem.append($('<i name="tuoteKorissa" class="far fa-check-circle"></i>'));
        }
        return iconElem;
    }

    function addItemToList(data, addPlus) {
        var iconElem = createDefaultCheckBoxElement(data.Pending);
        var row = createItemRow(iconElem, data.Title, data.Id, addPlus);
        @{
            if (Model.UserIsWriteAuthenticated)
            {
                @:row.click(togglePending);
            }
        }
        row.hide().appendTo("#ostoslista").fadeIn(1000);
    }
    </text>
        }
    }

    @{
        if (Model.UserIsWriteAuthenticated)
        {
    <text>
    function buyCheckedItems() {
        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'DELETE',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName/unpending",
            dataType: 'json',
            success: checkConnectionState,
            error: function (e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    function sendNew() {
        var elem = $("#uusiTuote");

        if (!elem) {
            return;
        }

        var title = elem.val().trim();

        if (!title) {
            return;
        }

        $.ajax({
            type: 'POST',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            data: JSON.stringify({
                Title: title
            }),
            success: function () {
                checkConnectionState();
                elem.val("");
                elem.focus();
            },
            error: function(e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    function togglePending() {
        var row = $(this);
        var elem = row.find('i[name="tuoteKorissa"]');
        var guidElement = row.find('input[name="tuoteId"]');

        if (!elem || !guidElement) {
            return;
        }

        row.off('click');
        var setPending = elem.hasClass("fa-check-circle");
        setItemRowAjaxRunning($(this));

        $.ajax({
            type: 'PUT',
            url: "/api/ShoppingList/" + guidElement.val() + "/" + setPending,
            dataType: 'json',
            success: checkConnectionState,
            error: function(e) {
                console.log("ERROR: " + e.toString());
                setItemRowPending(row, !setPending);
                row.click(togglePending);
            }
        });
    }

    function setItemRowAjaxRunning(row) {
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("far");
        checkElem.removeClass("fa-circle");
        checkElem.removeClass("fa-check-circle");
        checkElem.addClass("fas");
        checkElem.addClass("fa-spinner");
        checkElem.addClass("fa-spin");
    }
    </text>
        }
    }

    function keyPress(e, delegate) {
        if (e.keyCode === 13) {
            delegate();
            return false;
        }

        return true;
    }

    function openShoppingList() {
        var id = $("#ostoskassinTunnus");

        if (!id) {
            return;
        }

        window.location = "/?lista=" + encodeURIComponent(id.val());
    }

    function loadShoppingListData() {
        var elem = $("#ostolistaTuotteet");

        @{
            if (!Model.UserIsReadAuthenticated)
            {
        <text>
        elem.html("");
        elem.append($("<h2>Käytä ostoskassi tunnustasi!</h2>"));
        var row = $("<div></div>");
        row.append($('<input type="text" id="ostoskassinTunnus" size="10" placeholder="Syötä tunnus..." onkeypress="return keyPress(event, openShoppingList);" class="newItem"/>'));
        row.append("&nbsp;");
        row.append($('<input type="button" value="Avaa" onclick="openShoppingList();" class="buttons" />'));
        elem.append(row);
        elem.show();
        </text>
            }
            else
            {
        <text>
        elem.show();

        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'GET',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName",
            dataType: 'json',
            success: loadShoppingListDataSuccess,
            error: function(e) {
                console.log("ERROR: " + e.toString());
                loadShoppingListDataSuccess();
            }
        });
        </text>
            }
        }
    }

    @{
        if (Model.Shopper?.AllowNewFriendRequests ?? false)
        {
    <text>
    function removeShopperFriendRequest() {
        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'DELETE',
            url: "/api/ShoppingList/deleteMyShopperFriendRequest/@Model.UrlEncodedShopperName",
            dataType: 'json',
            success: function(data) {
                // Reload page
                window.location = window.location;
            },
            error: function(e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    function createShopperFriendRequest() {
        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'GET',
            url: "/api/ShoppingList/createShopperFriendRequest/@Model.UrlEncodedShopperName",
            dataType: 'json',
            success: function(data) {
                // Reload page
                window.location = window.location;
            },
            error: function(e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    </text>
        }
    }
    $(document).ready(function () {
        $.blockUI.defaults.css = {};
        $(document).ajaxStop($.unblockUI);
        var elem = $("#ostolistaTuotteet");
        var row;
        @{
            if (!Model.UserIsReadAuthenticated)
            {
        <text>
        elem.html("");
        </text>
                if (Model.UserIsShopperFriend)
                {
        <text>
        elem.append($('<h2 class="spaceAbove">Tässä ostoslistassa ei ole vielä lukuoikeuksia asetettuna!</h2>'));
        </text>
                }
                else if (Model.Shopper?.AllowNewFriendRequests ?? false)
                {
                    if (Model.UserIsShopperFriendRequested)
                    {
        <text>
        elem.append($('<h2 class="spaceAbove">Ostoslistan kaveripyyntöäsi ei ole vielä hyväksytty!</h2>'));
        row = $("<div></div>");
        row.append($('<input type="button" value="Poista kaveripyyntö" class="buttons" />').click(removeShopperFriendRequest));
        elem.append(row);
        </text>
                    }
                    else
                    {
        <text>
        elem.append($('<h2 class="spaceAbove">Tämä ostoslista hyväksyy kavereita!</h2>'));
        </text>
                        if (User.Identity.IsAuthenticated)
                        {
        <text>
        row = $("<div></div>");
        row.append($('<input type="button" value="Lähetä kaveripyyntö" class="buttons" />').click(createShopperFriendRequest));
        elem.append(row);
        </text>
                        }
                        else
                        {
        <text>
        row = $("<div></div>");
        row.append($('<a href="/Login" target="_self" title="Kirjaudu sisään Google tunnuksillasi" class="text-dark"><i class="fas fa-sign-in-alt"></i> Kirjaudu tästä ensin sisään</a>'));
        elem.append(row);
        </text>
                        }
                    }
                }
        <text>
        elem.append($('<h3 class="spaceAbove">Käytä ostoskassi tunnustasi!</h3>'));
        row = $("<div></div>");
        row.append($('<input type="text" id="ostoskassinTunnus" size="10" placeholder="Syötä ostoslistan tunnus..." onkeypress="return keyPress(event, openShoppingList);" class="newItem"/>'));
        row.append("&nbsp;");
        row.append($('<input type="button" value="Avaa" onclick="openShoppingList();" class="buttons" />'));
        elem.append(row);
        elem.show();
        </text>
            }
            else
            {
                if (!(Model.Shopper?.PublicWriteAccess ?? false) && (Model.Shopper?.AllowNewFriendRequests ?? false))
                {
                    if (!Model.User.Identity.IsAuthenticated)
                    {
        <text>
        elem.append($('<h3 class="spaceAbove">Tämä ostoslista hyväksyy kavereita!</h3>'));
        row = $("<div></div>");
        row.append($('<a href="/Login" target="_self" title="Kirjaudu sisään Google tunnuksillasi" class="text-dark"><i class="fas fa-sign-in-alt"></i> Kirjaudu tästä ensin sisään</a>'));
        elem.append(row);
        </text>
                    }
                    else
                    {
                        if (!Model.UserIsOwnerAuthenticated && !Model.UserIsShopperFriend && !Model.UserIsShopperFriendRequested)
                        {
        <text>
        elem.append($('<h3 class="spaceAbove">Tämä ostoslista hyväksyy kavereita!</h3>'));
        row = $("<div></div>");
        row.append($('<input type="button" value="Lähetä kaveripyyntö" class="buttons" />').click(createShopperFriendRequest));
        elem.append(row);
        </text>
                        }
                        else if (Model.UserIsShopperFriendRequested)
                        {
        <text>
        elem.append($('<h3 class="spaceAbove">Ostoslistan kaveripyyntöäsi ei ole vielä hyväksytty!</h3>'));
        row = $("<div></div>");
        row.append($('<input type="button" value="Poista kaveripyyntö" class="buttons" />').click(removeShopperFriendRequest));
        elem.append(row);
        </text>
                        }
                    }
                }
        <text>
        loadShoppingListData();

        connection.on("NewItemCreated", function(itemId, title, isPending) {
            row = findRow(itemId);

            if (row.length !== 1) {
                var iconElem = createDefaultCheckBoxElement(isPending);
                row = createItemRow(iconElem, title, itemId, true);
                @{
                    if (Model.UserIsWriteAuthenticated)
                    {
                        @:row.click(togglePending);
                    }
                } 
                row.hide().appendTo("#ostoslista").fadeIn(1000);
            }
        });
        connection.on("ItemPendingChanged", function(itemId, isPending) {
            row = findRow(itemId);

            if (row.length === 1) {
                setItemRowPending(row, isPending);
                @{
                    if (Model.UserIsWriteAuthenticated)
                    {
                        @:row.click(togglePending);
                    }
                } 
            }
        });
        connection.on("RemoveItem", function(itemId) {
            row = findRow(itemId);

            if (row.length === 1) {
                row.fadeOut(1000, function() { $(this).remove(); });
            }
        });
        connection.onclose(function() {
            reconnectToHub();
        });
        reconnectToHub();
        </text>
                    }
        }
    });
</script>
