@page
@using System.Web
@model OstoslistaAPI.Pages.IndexModel
@{
    ViewData["Title"] = "Tuotteet";
}

<div class="text-center">
    <h1><i class="fas fa-shopping-basket"></i> Ostoslista@(string.IsNullOrWhiteSpace(Model.ShopperName) ? "" : $" ({Model.HtmlEncodedShopperName})")</h1>
    <div id="ostolistaTuotteet" style="display: none;">
        <div>
            <input type="text" id="uusiTuote" placeholder="Syötä uusi tuote..." onkeypress="return keyPress(event, sendNew);" class="newItem"/>&nbsp;
            <input type="button" value="Lähetä" onclick="sendNew();" class="buttons"/>
        </div>
        <div class="shoppingList" id="ostoslista">Ladataan...</div>
        <div class="buyCheckedItems"><input type="button" value="Maksa valitut tuotteet" onclick="buyCheckedItems();" class="buttons"/></div>
    </div>
</div>

<script type="text/javascript">
    var connection = new signalR.HubConnectionBuilder().withUrl("/shoppingListHub").build();
    connection.serverTimeoutInMilliseconds = 60 * 60 * 1000;

    function buyCheckedItems() {
        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'DELETE',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName/unpending",
            dataType: 'json',
            success: checkConnectionState,
            error: function (e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    function keyPress(e, delegate) {
        if (e.keyCode === 13) {
            delegate();
            return false;
        }
    }

    function sendNew() {
        var elem = $("#uusiTuote");
  
        if (!elem) {
            return;
        }

        var title = elem.val().trim();

        if (!title) {
            return;
        }

        $.ajax({
            type: 'POST',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            data: JSON.stringify({
                Title: title
            }),
            success: function () {
                checkConnectionState();
                elem.val("");
                elem.focus();
            },
            error: function(e) {
                console.log("ERROR: " + e.toString());
            }
        });
    }

    function togglePending() {
        var row = $(this);
        var elem = row.find('i[name="tuoteKorissa"]');
        var guidElement = row.find('input[name="tuoteId"]');

        if (!elem || !guidElement) {
            return;
        }

        row.off('click');
        var setPending = elem.hasClass("fa-check-circle");
        setItemRowAjaxRunning($(this));

        $.ajax({
            type: 'PUT',
            url: "/api/ShoppingList/" + guidElement.val() + "/" + setPending,
            dataType: 'json',
            success: checkConnectionState,
            error: function(e) {
                console.log("ERROR: " + e.toString());
                setItemRowPending(row, !setPending);
                row.click(togglePending);
            }
        });
    }

    function setItemRowPending(row, isPending) {
        //console.log("setItemRowPending " + isPending);
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("fas");
        checkElem.removeClass("fa-spinner");
        checkElem.removeClass("fa-spin");
        checkElem.removeClass("far");
        checkElem.removeClass("fa-circle");
        checkElem.removeClass("fa-check-circle");
        checkElem.addClass("far");
        if (isPending) {
            checkElem.addClass("fa-circle");
        } else {
            checkElem.addClass("fa-check-circle");
        }
    }

    function setItemRowPendingFromData(row, data) {
        setItemRowPending(row, data.Pending);
    }

    function setItemRowAjaxRunning(row) {
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("far");
        checkElem.removeClass("fa-circle");
        checkElem.removeClass("fa-check-circle");
        checkElem.addClass("fas");
        checkElem.addClass("fa-spinner");
        checkElem.addClass("fa-spin");
    }

    function setItemRowValues(row, title, itemId) {
        row.prop("title", title);
        var idElem = row.find('input[name="tuoteId"]');
        idElem.val(itemId);
        var checkElem = row.find('i[name="tuoteKorissa"]');
        checkElem.removeClass("fas");
        checkElem.removeClass("fa-spinner");
        checkElem.removeClass("fa-spin");
        checkElem.addClass("far");
        checkElem.addClass("fa-circle");
    }

    function setItemRowDataValues(row, data) {
        setItemRowValues(row, data.Title, data.Id);
    }

    function findRow(itemId) {
        var elem = $("#ostolistaTuotteet");
        return elem.find('input[name="tuoteId"][value="' + itemId + '"]').parents('div.shoppingList-item-row');
    }

    function createItemRow(iconElem, title, itemId, addPlus) {
        var row = $('<div class="shoppingList-item-row"></div>');
        row.prop("title", title);
        row.append(iconElem);
        var cell2 = $('<div class="shoppingList-item-cell"></div>');
        cell2.append($('<span style="margin-left: 10px"></span>').text(title));
        cell2.append($('<input type="hidden" name="tuoteId"/>').val(itemId));
        if (addPlus) {
            cell2.append($('<i class="fa fa-plus-circle shoppingList-item-new" aria-hidden="true"></i>'));
        }
        row.append(cell2);
        return row;
    }

    function getTempItemRow(title) {
        var iconElem = $('<div class="shoppingList-item-cell"></div>');
        iconElem.append($('<i name="tuoteKorissa" class="fas fa-spinner fa-spin"></i>'));
        return createItemRow(iconElem, title, "", true);
    }

    function createDefaultCheckBoxElement(isPending) {
        var iconElem = $('<div class="shoppingList-item-cell"></div>');
        if (isPending) {
            iconElem.append($('<i name="tuoteKorissa" class="far fa-circle"></i>'));
        } else {
            iconElem.append($('<i name="tuoteKorissa" class="far fa-check-circle"></i>'));
        }
        return iconElem;
    }

    function addItemToList(data, addPlus) {
        var iconElem = createDefaultCheckBoxElement(data.Pending);
        var row = createItemRow(iconElem, data.Title, data.Id, addPlus);
        row.click(togglePending);
        row.hide().appendTo("#ostoslista").fadeIn(1000);
    }

    function openShoppingList() {
        var id = $("#ostoskassinTunnus");

        if (!id) {
            return;
        }

        window.location = "/?lista=" + encodeURIComponent(id.val());
    }

    function loadShoppingListData() {
        var elem = $("#ostolistaTuotteet");

        if (@(Model.ShopperName?.Length ?? 0) === 0) {
            elem.html("");
            elem.append($("<h2>Käytä ostoskassi tunnustasi!</h2>"));
            var row = $("<div></div>");
            row.append($('<input type="text" id="ostoskassinTunnus" size="10" placeholder="Syötä tunnus..." onkeypress="return keyPress(event, openShoppingList);" class="newItem"/>'));
            row.append("&nbsp;");
            row.append($('<input type="button" value="Avaa" onclick="openShoppingList();" class="buttons" />'));
            elem.append(row);
            elem.show();
            return;
        }

        elem.show();

        $.blockUI({ message: $('#waitIndContainer') });
        $.ajax({
            type: 'GET',
            url: "/api/ShoppingList/@Model.UrlEncodedShopperName",
            dataType: 'json',
            success: loadShoppingListDataSuccess,
            error: function(e) {
                console.log("ERROR: " + e.toString());
                loadShoppingListDataSuccess();
            }
        });
    }

    function loadShoppingListDataSuccess(data) {
        var ostoslista = $("#ostoslista");
        ostoslista.html("");

        for (var i = 0; data && i < data.length; i++) {
            addItemToList(data[i]);
        };
    }

    function checkConnectionState() {
        //var stateConversion = {0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected'};
        //console.log('SignalR connection state: ' + stateConversion[connection.state]);

        if (connection.state !== 1) {
            $.blockUI({ message: $('#waitIndContainer') });
            window.location = window.location;
        }
    }

    function reconnectToHub() {
        if (@(Model.ShopperName?.Length ?? 0) > 0) {
            console.log('Reconnecting to the hub...');
            connection.start().then(() => {
                connection.invoke("RegisterShopper", "@Model.EscapedShopperName").catch(err => console.error(err.toString()));
            });
        }
    }

    $(document).ready(function () {
        $.blockUI.defaults.css = {};
        $(document).ajaxStop($.unblockUI);
        loadShoppingListData();

        connection.on("NewItemCreated", function (itemId, title, isPending) {
            var row = findRow(itemId);

            if (row.length !== 1) {
                var iconElem = createDefaultCheckBoxElement(isPending);
                row = createItemRow(iconElem, title, itemId, true);
                row.click(togglePending);
                row.hide().appendTo("#ostoslista").fadeIn(1000);
            }
        });
        connection.on("ItemPendingChanged", function (itemId, isPending) {
            var row = findRow(itemId);

            if (row.length === 1) {
                setItemRowPending(row, isPending);
                row.click(togglePending);
            }
        });
        connection.on("RemoveItem", function (itemId) {
            var row = findRow(itemId);

            if (row.length === 1) {
                row.fadeOut(1000, function () { $(this).remove(); });
            }
        });
        connection.onclose(function() {
            reconnectToHub();
        });
        reconnectToHub();
    });

    $(window).on('beforeunload', function () {
        connection.stop();
    });
</script>
